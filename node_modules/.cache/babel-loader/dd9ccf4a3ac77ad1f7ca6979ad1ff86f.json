{"ast":null,"code":"import _objectSpread from \"/Users/katarzynakoch/.nvm/versions/node/v15.8.0/lib/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"/Users/katarzynakoch/.nvm/versions/node/v15.8.0/lib/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/katarzynakoch/.nvm/versions/node/v15.8.0/lib/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/katarzynakoch/.nvm/versions/node/v15.8.0/lib/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/katarzynakoch/.nvm/versions/node/v15.8.0/lib/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/katarzynakoch/.nvm/versions/node/v15.8.0/lib/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/Users/katarzynakoch/Desktop/kathys_coding/react-projects/sticky-notes-app/src/App.js\";\nimport React, { Component } from \"react\";\nimport Header from \"./Header.js\";\nimport NotesList from \"./NotesList.js\";\n/* This container component manages all of the state \nfor this application, delegating rendering logic to \npresentational components. */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  var _super = _createSuper(App);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      notes: [{\n        id: Date.now(),\n        title: \"\",\n        description: \"\",\n        doesMatchSearch: true\n      }],\n      searchText: \"\"\n    };\n\n    _this.addNote = function () {\n      var newNote = {\n        id: Date.now(),\n        title: \"\",\n        description: \"\",\n        doesMatchSearch: true\n      };\n      var newNotes = [newNote].concat(_toConsumableArray(_this.state.notes));\n\n      _this.setState({\n        notes: newNotes\n      });\n    };\n\n    _this.onType = function (editMeId, updatedKey, updatedValue) {\n      /* this event handler updates sticky note text fields\n        - editMeId: the id of the note that the user typed in\n        - updatedKey: which field was edited? 'title' or 'description'\n        - updatedValue: new value of edited field */\n      var updateIdMatch = function updateIdMatch(note) {\n        if (note.id !== editMeId) {\n          return note;\n        } else {\n          if (updatedKey === \"title\") {\n            return _objectSpread(_objectSpread({}, note), {}, {\n              title: updatedValue\n            });\n          } else {\n            return _objectSpread(_objectSpread({}, note), {}, {\n              description: updatedValue\n            });\n          }\n        }\n      };\n\n      var updatedNotes = _this.state.notes.map(updateIdMatch);\n\n      _this.setState({\n        notes: updatedNotes\n      });\n    };\n\n    _this.onSearch = function (e) {\n      /* toggle the doesMatchSearch boolean value of each sticky\n      note when the user types in the search field.\n      set the doesMatchSearch value to true for a sticky note if\n      it's title or description matches the search string. */\n      var searchText = e.target.value.toLowerCase();\n\n      var updatedNotes = _this.state.notes.map(function (note) {\n        if (!searchText) {\n          /* If the search field is empty, then\n          we set the doesMatchSearch value for every note to true. */\n          return _objectSpread(_objectSpread({}, note), {}, {\n            doesMatchSearch: true\n          });\n        } else {\n          var title = note.title.toLowerCase();\n          var description = note.description.toLowerCase();\n          var titleMatch = title.includes(searchText);\n          var descriptionMatch = description.includes(searchText);\n          var hasMatch = titleMatch || descriptionMatch;\n          return _objectSpread(_objectSpread({}, note), {}, {\n            doesMatchSearch: hasMatch\n          });\n        }\n      });\n\n      _this.setState({\n        searchText: searchText,\n        notes: updatedNotes\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Header, {\n          searchText: this.state.searchText,\n          addNote: this.addNote,\n          onSearch: this.onSearch\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(NotesList, {\n          notes: this.state.notes,\n          onType: this.onType\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 7\n      }, this);\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/katarzynakoch/Desktop/kathys_coding/react-projects/sticky-notes-app/src/App.js"],"names":["React","Component","Header","NotesList","App","state","notes","id","Date","now","title","description","doesMatchSearch","searchText","addNote","newNote","newNotes","setState","onType","editMeId","updatedKey","updatedValue","updateIdMatch","note","updatedNotes","map","onSearch","e","target","value","toLowerCase","titleMatch","includes","descriptionMatch","hasMatch"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Header from \"./Header.js\";\nimport NotesList from \"./NotesList.js\";\n\n/* This container component manages all of the state \nfor this application, delegating rendering logic to \npresentational components. */\nclass App extends Component {\n  state = {\n    notes: [\n      {\n        id: Date.now(),\n        title: \"\",\n        description: \"\",\n        doesMatchSearch: true\n      }\n    ],\n    searchText: \"\"\n  };\n  addNote = () => {\n    const newNote = {\n      id: Date.now(),\n      title: \"\",\n      description: \"\",\n      doesMatchSearch: true\n    };\n    const newNotes = [newNote, ...this.state.notes];\n    this.setState({ notes: newNotes });\n  };\n  onType = (editMeId, updatedKey, updatedValue) => {\n    /* this event handler updates sticky note text fields\n      - editMeId: the id of the note that the user typed in\n      - updatedKey: which field was edited? 'title' or 'description'\n      - updatedValue: new value of edited field */\n    const updateIdMatch = (note) => {\n      if (note.id !== editMeId) {\n        return note;\n      } else {\n        if (updatedKey === \"title\") {\n          return {\n            ...note,\n            title: updatedValue\n          };\n        } else {\n          return {\n            ...note,\n            description: updatedValue\n          };\n        }\n      }\n    };\n    const updatedNotes = this.state.notes.map(updateIdMatch);\n    this.setState({ notes: updatedNotes });\n  };\n  onSearch = (e) => {\n    /* toggle the doesMatchSearch boolean value of each sticky\n    note when the user types in the search field.\n    set the doesMatchSearch value to true for a sticky note if\n    it's title or description matches the search string. */\n    const searchText = e.target.value.toLowerCase();\n    const updatedNotes = this.state.notes.map((note) => {\n      if (!searchText) {\n        /* If the search field is empty, then\n      we set the doesMatchSearch value for every note to true. */\n        return {\n          ...note,\n          doesMatchSearch: true\n        };\n      } else {\n        const title = note.title.toLowerCase();\n        const description = note.description.toLowerCase();\n        const titleMatch = title.includes(searchText);\n        const descriptionMatch = description.includes(searchText);\n        const hasMatch = titleMatch || descriptionMatch;\n        return {\n          ...note,\n          doesMatchSearch: hasMatch\n        };\n      }\n    });\n    this.setState({\n      searchText: searchText,\n      notes: updatedNotes\n    });\n  };\n  render() {\n    return (\n      <div>\n        <Header\n          searchText={this.state.searchText}\n          addNote={this.addNote}\n          onSearch={this.onSearch}\n        />\n        <NotesList notes={this.state.notes} onType={this.onType} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}